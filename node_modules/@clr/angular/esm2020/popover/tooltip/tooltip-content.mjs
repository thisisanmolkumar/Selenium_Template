/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Inject, Input, Optional } from '@angular/core';
import { assertNever } from '../../utils/assert/assert.helpers';
import { UNIQUE_ID } from '../../utils/id-generator/id-generator.service';
import { AbstractPopover } from '../common/abstract-popover';
import { Point } from '../common/popover';
import { POPOVER_HOST_ANCHOR } from '../common/popover-host-anchor.token';
import * as i0 from "@angular/core";
import * as i1 from "./providers/tooltip-id.service";
const POSITIONS = ['bottom-left', 'bottom-right', 'top-left', 'top-right', 'right', 'left'];
const SIZES = ['xs', 'sm', 'md', 'lg'];
const defaultPosition = 'right';
const defaultSize = 'sm';
export class ClrTooltipContent extends AbstractPopover {
    constructor(injector, parentHost, uniqueId, tooltipIdService) {
        super(injector, parentHost);
        this.uniqueId = uniqueId;
        this.tooltipIdService = tooltipIdService;
        this._position = defaultPosition;
        this._size = defaultSize;
        if (!parentHost) {
            throw new Error('clr-tooltip-content should only be used inside of a clr-tooltip');
        }
        // Set the default id in case consumer does not supply a custom id.
        this.id = uniqueId;
    }
    get id() {
        return this._id;
    }
    set id(value) {
        const id = value || '';
        this._id = id;
        this.tooltipIdService.updateId(id);
    }
    get position() {
        return this._position;
    }
    set position(value) {
        const oldPosition = this._position;
        const newPosition = POSITIONS.includes(value) ? value : defaultPosition;
        this._position = newPosition;
        this.updateCssClass({ oldClass: `tooltip-${oldPosition}`, newClass: `tooltip-${newPosition}` });
        // set the popover values based on direction
        switch (newPosition) {
            case 'top-right':
                this.anchorPoint = Point.TOP_CENTER;
                this.popoverPoint = Point.LEFT_BOTTOM;
                break;
            case 'top-left':
                this.anchorPoint = Point.TOP_CENTER;
                this.popoverPoint = Point.RIGHT_BOTTOM;
                break;
            case 'bottom-right':
                this.anchorPoint = Point.BOTTOM_CENTER;
                this.popoverPoint = Point.LEFT_TOP;
                break;
            case 'bottom-left':
                this.anchorPoint = Point.BOTTOM_CENTER;
                this.popoverPoint = Point.RIGHT_TOP;
                break;
            case 'right':
                this.anchorPoint = Point.RIGHT_CENTER;
                this.popoverPoint = Point.LEFT_TOP;
                break;
            case 'left':
                this.anchorPoint = Point.LEFT_CENTER;
                this.popoverPoint = Point.RIGHT_TOP;
                break;
            default:
                assertNever(newPosition);
        }
    }
    get size() {
        return this._size;
    }
    set size(value) {
        const oldSize = this._size;
        const newSize = SIZES.includes(value) ? value : defaultSize;
        this._size = newSize;
        this.updateCssClass({ oldClass: `tooltip-${oldSize}`, newClass: `tooltip-${newSize}` });
    }
    updateCssClass({ oldClass, newClass }) {
        this.renderer.removeClass(this.el.nativeElement, oldClass);
        this.renderer.addClass(this.el.nativeElement, newClass);
    }
}
ClrTooltipContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ClrTooltipContent, deps: [{ token: i0.Injector }, { token: POPOVER_HOST_ANCHOR, optional: true }, { token: UNIQUE_ID }, { token: i1.TooltipIdService }], target: i0.ɵɵFactoryTarget.Component });
ClrTooltipContent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.3", type: ClrTooltipContent, selector: "clr-tooltip-content", inputs: { id: "id", position: ["clrPosition", "position"], size: ["clrSize", "size"] }, host: { properties: { "class.tooltip-content": "true", "style.opacity": "1", "attr.role": "\"tooltip\"", "id": "id" } }, usesInheritance: true, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ClrTooltipContent, decorators: [{
            type: Component,
            args: [{
                    selector: 'clr-tooltip-content',
                    template: `<ng-content></ng-content>`,
                    host: {
                        '[class.tooltip-content]': 'true',
                        '[style.opacity]': '1',
                        '[attr.role]': '"tooltip"',
                        '[id]': 'id',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i0.ElementRef, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [POPOVER_HOST_ANCHOR]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [UNIQUE_ID]
                }] }, { type: i1.TooltipIdService }]; }, propDecorators: { id: [{
                type: Input
            }], position: [{
                type: Input,
                args: ['clrPosition']
            }], size: [{
                type: Input,
                args: ['clrSize']
            }] } });
//# sourceMappingURL=data:application/json;base64,