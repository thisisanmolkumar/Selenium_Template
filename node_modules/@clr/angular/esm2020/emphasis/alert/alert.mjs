/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, EventEmitter, Input, Optional, Output } from '@angular/core';
import { AlertIconAndTypesService } from './providers/icon-and-types.service';
import * as i0 from "@angular/core";
import * as i1 from "./providers/icon-and-types.service";
import * as i2 from "./providers/multi-alert.service";
import * as i3 from "../../utils/i18n/common-strings.service";
import * as i4 from "@angular/common";
import * as i5 from "../../icon/icon";
export class ClrAlert {
    constructor(iconService, cdr, multiAlertService, commonStrings) {
        this.iconService = iconService;
        this.cdr = cdr;
        this.multiAlertService = multiAlertService;
        this.commonStrings = commonStrings;
        this.subscriptions = [];
        this.isSmall = false;
        this.closable = true;
        this.isAppLevel = false;
        // Aria
        this.clrCloseButtonAriaLabel = this.commonStrings.keys.alertCloseButtonAriaLabel;
        this._closed = false;
        this._closedChanged = new EventEmitter(false);
    }
    ngOnInit() {
        if (this.multiAlertService) {
            this.subscriptions.push(this.multiAlertService.changes.subscribe(() => {
                this.hidden = this.multiAlertService.currentAlert !== this;
            }));
        }
    }
    ngOnDestroy() {
        this.subscriptions.forEach(sub => sub.unsubscribe());
    }
    set closed(value) {
        if (value && !this._closed) {
            this.close();
        }
        else if (!value && this._closed) {
            this.open();
        }
    }
    set alertType(val) {
        this.iconService.alertType = val;
    }
    get alertType() {
        return this.iconService.alertType;
    }
    set alertIconShape(value) {
        this.iconService.alertIconShape = value;
    }
    get alertClass() {
        return this.iconService.iconInfoFromType(this.iconService.alertType).cssClass;
    }
    set hidden(value) {
        if (value !== this._hidden) {
            this._hidden = value;
            this.cdr.detectChanges();
        }
    }
    get hidden() {
        return this._hidden;
    }
    close() {
        if (!this.closable) {
            return;
        }
        const isCurrentAlert = this.multiAlertService?.currentAlert === this;
        this._closed = true;
        if (this.multiAlertService) {
            this.multiAlertService.close(isCurrentAlert);
        }
        this._closedChanged.emit(true);
    }
    open() {
        this._closed = false;
        if (this.multiAlertService) {
            this.multiAlertService.open();
        }
        this._closedChanged.emit(false);
    }
}
ClrAlert.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ClrAlert, deps: [{ token: i1.AlertIconAndTypesService }, { token: i0.ChangeDetectorRef }, { token: i2.MultiAlertService, optional: true }, { token: i3.ClrCommonStringsService }], target: i0.ɵɵFactoryTarget.Component });
ClrAlert.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.3", type: ClrAlert, selector: "clr-alert", inputs: { isSmall: ["clrAlertSizeSmall", "isSmall"], closable: ["clrAlertClosable", "closable"], isAppLevel: ["clrAlertAppLevel", "isAppLevel"], clrCloseButtonAriaLabel: "clrCloseButtonAriaLabel", closed: ["clrAlertClosed", "closed"], alertType: ["clrAlertType", "alertType"], alertIconShape: ["clrAlertIcon", "alertIconShape"] }, outputs: { _closedChanged: "clrAlertClosedChange" }, providers: [AlertIconAndTypesService], ngImport: i0, template: "<!--\n  ~ Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<div\n  *ngIf=\"!_closed\"\n  class=\"alert\"\n  [ngClass]=\"alertClass\"\n  [class.alert-hidden]=\"hidden\"\n  [class.alert-sm]=\"isSmall\"\n  [class.alert-app-level]=\"isAppLevel\"\n>\n  <div class=\"alert-items\">\n    <ng-content></ng-content>\n  </div>\n  <button type=\"button\" class=\"close\" *ngIf=\"closable\" (click)=\"close()\" [attr.aria-label]=\"clrCloseButtonAriaLabel\">\n    <cds-icon shape=\"window-close\"></cds-icon>\n  </button>\n</div>\n", styles: [":host{display:block}\n"], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.CdsIconCustomTag, selector: "cds-icon" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ClrAlert, decorators: [{
            type: Component,
            args: [{ selector: 'clr-alert', providers: [AlertIconAndTypesService], styles: [':host { display: block; }'], template: "<!--\n  ~ Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<div\n  *ngIf=\"!_closed\"\n  class=\"alert\"\n  [ngClass]=\"alertClass\"\n  [class.alert-hidden]=\"hidden\"\n  [class.alert-sm]=\"isSmall\"\n  [class.alert-app-level]=\"isAppLevel\"\n>\n  <div class=\"alert-items\">\n    <ng-content></ng-content>\n  </div>\n  <button type=\"button\" class=\"close\" *ngIf=\"closable\" (click)=\"close()\" [attr.aria-label]=\"clrCloseButtonAriaLabel\">\n    <cds-icon shape=\"window-close\"></cds-icon>\n  </button>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.AlertIconAndTypesService }, { type: i0.ChangeDetectorRef }, { type: i2.MultiAlertService, decorators: [{
                    type: Optional
                }] }, { type: i3.ClrCommonStringsService }]; }, propDecorators: { isSmall: [{
                type: Input,
                args: ['clrAlertSizeSmall']
            }], closable: [{
                type: Input,
                args: ['clrAlertClosable']
            }], isAppLevel: [{
                type: Input,
                args: ['clrAlertAppLevel']
            }], clrCloseButtonAriaLabel: [{
                type: Input
            }], closed: [{
                type: Input,
                args: ['clrAlertClosed']
            }], _closedChanged: [{
                type: Output,
                args: ['clrAlertClosedChange']
            }], alertType: [{
                type: Input,
                args: ['clrAlertType']
            }], alertIconShape: [{
                type: Input,
                args: ['clrAlertIcon']
            }] } });
//# sourceMappingURL=data:application/json;base64,