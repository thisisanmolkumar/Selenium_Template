import { AfterContentInit, EventEmitter, Injector, OnDestroy, OnInit } from '@angular/core';
import { IfExpandService } from '../../utils/conditional/if-expanded.service';
import { ForTypeAheadProvider } from '../../utils/for-type-ahead/for-type-ahead.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrSelectedState } from './models/selected-state.enum';
import { TreeNodeModel } from './models/tree-node.model';
import { TreeFeaturesService } from './tree-features.service';
import { TreeFocusManagerService } from './tree-focus-manager.service';
import { ClrTreeNodeLink } from './tree-node-link';
import * as i0 from "@angular/core";
export declare class ClrTreeNode<T> implements OnInit, AfterContentInit, OnDestroy {
    nodeId: string;
    private platformId;
    private forTypeAheadProvider;
    featuresService: TreeFeaturesService<T>;
    expandService: IfExpandService;
    commonStrings: ClrCommonStringsService;
    private focusManager;
    STATES: typeof ClrSelectedState;
    private skipEmitChange;
    isModelLoading: boolean;
    private typeAheadKeyEvent;
    private typeAheadKeyBuffer;
    constructor(nodeId: string, platformId: any, parent: ClrTreeNode<T>, forTypeAheadProvider: ForTypeAheadProvider, featuresService: TreeFeaturesService<T>, expandService: IfExpandService, commonStrings: ClrCommonStringsService, focusManager: TreeFocusManagerService<T>, injector: Injector);
    _model: TreeNodeModel<T>;
    isExpandable(): boolean;
    isSelectable(): boolean;
    get selected(): ClrSelectedState | boolean;
    set selected(value: ClrSelectedState | boolean);
    selectedChange: EventEmitter<ClrSelectedState>;
    get ariaSelected(): boolean;
    expandable: boolean | undefined;
    get expanded(): boolean;
    set expanded(value: boolean);
    expandedChange: EventEmitter<boolean>;
    private subscriptions;
    contentContainerTabindex: number;
    private contentContainer;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    private treeNodeLinkList;
    get treeNodeLink(): ClrTreeNodeLink;
    private setTabIndex;
    private checkTabIndex;
    focusTreeNode(): void;
    broadcastFocusOnContainer(): void;
    onKeyDown(event: KeyboardEvent): void;
    private get isParent();
    private toggleExpandOrTriggerDefault;
    private expandOrFocusFirstChild;
    private collapseOrFocusParent;
    private triggerDefaultAction;
    static ɵfac: i0.ɵɵFactoryDeclaration<ClrTreeNode<any>, [null, null, { optional: true; skipSelf: true; }, { optional: true; self: true; }, null, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ClrTreeNode<any>, "clr-tree-node", never, { "selected": "clrSelected"; "expandable": "clrExpandable"; "expanded": "clrExpanded"; }, { "selectedChange": "clrSelectedChange"; "expandedChange": "clrExpandedChange"; }, ["treeNodeLinkList"], ["*", "clr-tree-node", "[clrIfExpanded]"]>;
}
